{"version":3,"sources":["meteor://ðŸ’»app/packages/barbatus:typescript-compiler/logger.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/file-mixin.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript-compiler.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript.js"],"names":["util","Npm","require","Logger_","llevel","process","env","TYPESCRIPT_LOG","newProfiler","name","profiler","Profiler","isProfile","start","log","msg","args","console","apply","concat","debug","isDebug","assert","isAssert","Logger","time","format","_started","end","timeEnd","createHash","FileMixin","getShortArch","arch","getArch","test","warn","error","sourcePath","line","column","message","isBare","fileOptions","getFileOptions","bare","isConfig","getPathInPackage","isDeclaration","TypeScript","isDeclarationFile","getBasename","getPackagePrefixPath","packageName","getPackageName","replace","inputFilePath","getES6ModuleName","packaged","removeTsExt","async","Future","minimatch","TSBuild","path","TypeScriptCompiler","extraOptions","maxParallelism","validateExtraOptions","tsconfig","getDefaultOptions","defExclude","exclude","cfgHash","diagHash","Set","archSet","processFilesForTarget","inputFiles","extendFiles","processConfig","excludeFiles","length","filesMap","Map","forEach","inputFile","index","set","getExtendedPath","getFileContent","get","filePath","undefined","getContentsAsString","typings","compilerOptions","getCompilerOptions","useCache","buildOptions","pcompile","archFiles","filterArchFiles","filePaths","map","pbuild","tsBuild","pfiles","future","filter","eachLimit","cb","co","source","outputFilePath","toBeAdded","data","hash","getSourceHash","sourceMap","moduleName","getFileModuleName","pemit","result","emit","throwSyntax","processDiagnostics","diagnostics","code","module","addJavaScript","resolver","wait","mixins","_","extend","defaults","reduce","diagnostic","dob","add","shown","keys","key","getShallowHash","has","syntacticErrors","semanticErrors","ob","Object","sort","update","digest","packagedPath","options","cfgFile","parseConfig","cfgContent","JSON","parse","files","isArray","Error","getTypings","ex","ind","indexOf","endsWith","join","err","resultFiles","pexclude","excludes","startsWith","check","Array","meteorTS","validateOptions","validateAndConvertOptions","dco","resultOptions","clone","compile","setCacheDir","cacheDir","match"],"mappings":"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","file":"/packages/barbatus_typescript-compiler.js","sourcesContent":["const util = Npm.require('util');\n\nclass Logger_ {\n  constructor() {\n    this.llevel = process.env.TYPESCRIPT_LOG;\n  }\n\n  newProfiler(name) {\n    let profiler = new Profiler(name);\n    if (this.isProfile) profiler.start();\n    return profiler;\n  }\n\n  get isDebug() {\n    return this.llevel >= 2;\n  }\n\n  get isProfile() {\n    return this.llevel >= 3;\n  }\n\n  get isAssert() {\n    return this.llevel >= 4;\n  }\n\n  log(msg, ...args) {\n    if (this.llevel >= 1) {\n      console.log.apply(null, [msg].concat(args));\n    }\n  }\n\n  debug(msg, ...args) {\n    if (this.isDebug) {\n      this.log.apply(this, msg, args);\n    }\n  }\n\n  assert(msg, ...args) {\n    if (this.isAssert) {\n      this.log.apply(this, msg, args);\n    }\n  }\n};\n\nLogger = new Logger_();\n\nclass Profiler {\n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    console.log('%s started', this.name);\n    console.time(util.format('%s time', this.name));\n    this._started = true;\n  }\n\n  end() {\n    if (this._started) {\n      console.timeEnd(util.format('%s time', this.name));\n    }\n  }\n}\n","const createHash = Npm.require('crypto').createHash;\n\nFileMixin = {\n  getShortArch() {\n    let arch = this.getArch();\n    return /^web/.test(arch) ? 'web' : 'os';\n  },\n\n  warn(error) {\n    console.log(`${error.sourcePath} (${error.line}, ${error.column}): ${error.message}`);\n  },\n\n  isBare() {\n    let fileOptions = this.getFileOptions();\n    return fileOptions && fileOptions.bare;\n  },\n\n  // Get root app config.\n  isConfig() {\n    return this.getPathInPackage() === 'tsconfig.json';\n  },\n\n  isDeclaration() {\n    return TypeScript.isDeclarationFile(this.getBasename());\n  },\n\n  // Get path with package prefix if any.\n  getPackagePrefixPath() {\n    let packageName = this.getPackageName();\n    packageName = packageName ?\n      (packageName.replace(':', '_') + '/') : '';\n    let inputFilePath = this.getPathInPackage();\n    return packageName + inputFilePath;\n  },\n\n  getES6ModuleName() {\n    let packaged = this.getPackagePrefixPath();\n    return TypeScript.removeTsExt(packaged);\n  }\n};\n","const async = Npm.require('async');\nconst Future = Npm.require('fibers/future');\nconst minimatch = Npm.require('minimatch');\nconst TSBuild = Npm.require('meteor-typescript').TSBuild;\nconst createHash = Npm.require('crypto').createHash;\nconst path = Npm.require('path');\n\nTypeScriptCompiler = class TypeScriptCompiler {\n  constructor(extraOptions, maxParallelism) {\n    TypeScript.validateExtraOptions(extraOptions);\n\n    this.extraOptions = extraOptions;\n    this.maxParallelism = maxParallelism || 10;\n    this.tsconfig = TypeScript.getDefaultOptions();\n    this.defExclude = ['**/node_modules/**'];\n    this.tsconfig.exclude = this.defExclude;\n    this.cfgHash = null;\n    this.diagHash = new Set;\n    this.archSet = new Set;\n  }\n\n  processFilesForTarget(inputFiles) {\n    this.extendFiles(inputFiles);\n\n    // If tsconfig.json has changed, create new one.\n    this.processConfig(inputFiles);\n\n    inputFiles = this.excludeFiles(inputFiles);\n\n    if (! inputFiles.length) return;\n\n    let filesMap = new Map;\n    inputFiles.forEach((inputFile, index) => {\n      filesMap.set(this.getExtendedPath(inputFile), index);\n    });\n\n    let getFileContent = filePath => {\n      let index = filesMap.get(filePath);\n      return index !== undefined ?\n        inputFiles[index].getContentsAsString() : null;\n    };\n\n    // Assemble options.\n    let typings = this.tsconfig.typings;\n    let compilerOptions = this.tsconfig.compilerOptions;\n    compilerOptions = TypeScript.getCompilerOptions(\n      compilerOptions, this.extraOptions);\n    let useCache = this.tsconfig.useCache;\n    let buildOptions = { compilerOptions, typings, useCache };\n\n    let pcompile = Logger.newProfiler('compilation');\n    let arch = inputFiles[0].getArch();\n    let archFiles = this.filterArchFiles(inputFiles, arch);\n    let filePaths = archFiles.map(inputFile => this.getExtendedPath(inputFile));\n    Logger.log('process files: %s', filePaths);\n    buildOptions.arch = arch;\n    let pbuild = Logger.newProfiler('tsBuild');\n    let tsBuild = new TSBuild(filePaths, getFileContent, buildOptions);\n    pbuild.end();\n\n    let pfiles = Logger.newProfiler('tsEmitFiles');\n    let future = new Future;\n    // Don't emit typings.\n    archFiles = archFiles.filter(inputFile => !inputFile.isDeclaration());\n    async.eachLimit(archFiles, this.maxParallelism, (inputFile, cb) => {\n      let co = compilerOptions;\n      let source = inputFile.getContentsAsString();\n      let inputFilePath = inputFile.getPathInPackage();\n      let outputFilePath = TypeScript.removeTsExt(inputFilePath) + '.js';\n      let toBeAdded = {\n        sourcePath: inputFilePath,\n        path: outputFilePath,\n        data: source,\n        hash: inputFile.getSourceHash(),\n        sourceMap: null,\n        bare: inputFile.isBare()\n      };\n\n      let filePath = this.getExtendedPath(inputFile);\n      let moduleName = this.getFileModuleName(inputFile, co);\n\n      let pemit = Logger.newProfiler('tsEmit');\n      let result = tsBuild.emit(filePath, moduleName);\n      let throwSyntax = this.processDiagnostics(inputFile,\n        result.diagnostics, co);\n      pemit.end();\n\n      if (! throwSyntax) {\n        toBeAdded.data = result.code;\n        let module = compilerOptions.module;\n        toBeAdded.bare = toBeAdded.bare || module === 'none';\n        toBeAdded.hash = result.hash;\n        toBeAdded.sourceMap = result.sourceMap;\n        inputFile.addJavaScript(toBeAdded);\n      }\n\n      cb();\n    }, future.resolver());\n\n    pfiles.end();\n\n    future.wait();\n\n    pcompile.end();\n  }\n\n  extendFiles(inputFiles, mixins) {\n    mixins = _.extend({}, FileMixin, mixins);\n    inputFiles.forEach(inputFile => _.defaults(inputFile, mixins));\n  }\n\n  processDiagnostics(inputFile, diagnostics, compilerOptions) {\n    // Remove duplicated warnings for shared files\n    // by saving hashes of already shown warnings.\n    let reduce = (diagnostic, cb) => {\n      let dob = {\n        message: diagnostic.message,\n        sourcePath: this.getExtendedPath(inputFile),\n        line: diagnostic.line,\n        column: diagnostic.column\n      };\n      let arch = inputFile.getArch();\n      // TODO: find out how to get list of architectures.\n      this.archSet.add(arch);\n\n      let shown = false;\n      for (let key of this.archSet.keys()) {\n        if (key !== arch) {\n          dob.arch = key;\n          let hash = this.getShallowHash(dob);\n          if (this.diagHash.has(hash)) {\n            shown = true; break;\n          }\n        }\n      }\n      if (! shown) {\n        dob.arch = arch;\n        let hash = this.getShallowHash(dob);\n        this.diagHash.add(hash);\n        cb(dob);\n      }\n    }\n\n    // Always throw syntax errors.\n    let throwSyntax = !! diagnostics.syntacticErrors.length;\n    diagnostics.syntacticErrors.forEach(diagnostic => {\n      reduce(diagnostic, dob => inputFile.error(dob));\n    });\n\n    let packageName = inputFile.getPackageName();\n    if (packageName) return throwSyntax;\n\n    // And log out other errors except package files.\n    if (compilerOptions && compilerOptions.diagnostics) {\n      diagnostics.semanticErrors.forEach(diagnostic => {\n        reduce(diagnostic, dob => inputFile.warn(dob));\n      });\n    }\n\n    return throwSyntax;\n  }\n\n  getShallowHash(ob) {\n    let hash = createHash('sha1');\n    let keys = Object.keys(ob);\n    keys.sort();\n\n    keys.forEach(key => {\n      hash.update(key).update('' + ob[key]);\n    });\n\n    return hash.digest('hex');\n  }\n\n  getExtendedPath(inputFile) {\n    let packageName = inputFile.getPackageName();\n    let packagedPath = inputFile.getPackagePrefixPath();\n\n    let filePath = packageName ?\n      ('packages/' + packagedPath) : packagedPath;\n\n    return filePath;\n  }\n\n  getFileModuleName(inputFile, options) {\n    if (options.module === 'none') return null;\n\n    return inputFile.getES6ModuleName();\n  }\n\n  processConfig(inputFiles) {\n    let cfgFile = inputFiles.filter(\n      inputFile => inputFile.isConfig())[0];\n    if (cfgFile) {\n      let source = cfgFile.getContentsAsString();\n      let hash = cfgFile.getSourceHash();\n      // If hashes differ, create new tsconfig. \n      if (hash !== this.cfgHash) {\n        this.tsconfig = this.parseConfig(source);\n        this.cfgHash = hash;\n      }\n    }\n  }\n\n  parseConfig(cfgContent) {\n    try {\n      let tsconfig = JSON.parse(cfgContent);\n\n      let files = tsconfig.files || [];\n      if (! _.isArray(files)) {\n        throw new Error('[tsconfig]: files is not array');\n      }\n      // Allow only typings in the \"files\" array.\n      tsconfig.typings = this.getTypings(files);\n\n      let exclude = tsconfig.exclude || [];\n      if (! _.isArray(exclude)) {\n        throw new Error('[tsconfig]: exclude is not array');\n      }\n\n      exclude = exclude.filter(ex => !!ex);\n      exclude.forEach((ex, ind) => {\n        if (ex.indexOf('.') >= 0 || ex.endsWith('*')) return;\n        exclude[ind] = path.join(ex, '*');\n      });\n      tsconfig.exclude = exclude.concat(this.defExclude);\n\n      return tsconfig;\n    } catch(err) {\n      throw new Error(`Format of the tsconfig is invalid: ${err}`);\n    }\n  }\n\n  excludeFiles(inputFiles) {\n    let resultFiles = inputFiles;\n\n    let pexclude = Logger.newProfiler('exclude');\n    for (let ex of this.tsconfig.exclude) {\n      resultFiles = resultFiles.filter(inputFile => {\n        let path = inputFile.getPathInPackage();\n        Logger.assert('exclude pattern %s: %s', ex, path);\n        return ! minimatch(path, ex);\n      });\n    }\n    pexclude.end();\n\n    return resultFiles;\n  }\n\n  filterArchFiles(inputFiles, arch) {\n    let archFiles = inputFiles.filter((inputFile, index) => {\n      if (inputFile.isConfig()) return false;\n\n      return inputFile.getArch() === arch;\n    });\n\n    // Include only typings that current arch needs,\n    // typings/main is for the server only and\n    // typings/browser - for the client.\n    let excludes = arch.startsWith('web') ?\n      ['typings/main/**', 'typings/main.d.ts'] :\n      ['typings/browser/**', 'typings/browser.d.ts'];\n\n    for (let ex of excludes) {\n      archFiles = archFiles.filter(inputFile => {\n        let path = inputFile.getPathInPackage();\n        return ! minimatch(path, ex);\n      });\n    }\n\n    return archFiles;\n  }\n\n  getTypings(filePaths) {\n    check(filePaths, Array);\n\n    return filePaths.filter(filePath => {\n      return TypeScript.isDeclarationFile(filePath);\n    });\n  }\n}\n","const meteorTS = Npm.require('meteor-typescript');\n\nTypeScript = {\n  validateOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions(options);\n  },\n\n  // Extra options are the same compiler options\n  // but passed in the compiler constructor.\n  validateExtraOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions({\n      compilerOptions: options\n    });\n  },\n\n  getDefaultOptions: meteorTS.getDefaultOptions,\n\n  getCompilerOptions(compilerOptions, extraOptions) {\n    let dco = meteorTS.getDefaultOptions().compilerOptions;\n    let resultOptions = compilerOptions ? _.clone(compilerOptions) : dco;\n\n    // First, default undefined values, e.g.,\n    // if diagnostics undefined, set it to true, etc.\n    _.defaults(resultOptions, dco);\n\n    // Second, apply extra options, i.e.,\n    // options passed in the compiler constructor.\n    _.extend(resultOptions, extraOptions);\n\n    return resultOptions;\n  },\n\n  compile(source, options) {\n    options = options || meteorTS.getDefaultOptions();\n    return meteorTS.compile(source, options);\n  },\n\n  setCacheDir(cacheDir) {\n    meteorTS.setCacheDir(cacheDir);\n  },\n\n  isDeclarationFile(filePath) {\n    return filePath.match(/^.*\\.d\\.ts$/);\n  },\n\n  removeTsExt(path) {\n    return path && path.replace(/(\\.tsx|\\.ts)$/g, '');\n  }\n}\n"]}